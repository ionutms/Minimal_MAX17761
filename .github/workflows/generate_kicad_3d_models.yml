name: Generate KiCad 3D Models
on:
  push:
    branches: [ 3d_models_generation ]
  workflow_dispatch:

jobs:
  generate-kicad-3d-models:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find KiCad project files
        id: find-files
        run: |
          PROJECT_FILE=$(find . -name "*.kicad_pro" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "No KiCad project files found"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          PROJECT_NAME=$(basename "$PROJECT_FILE" .kicad_pro)
          
          echo "PROJECT_FILE: $PROJECT_FILE"
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "PROJECT_NAME: $PROJECT_NAME"
          
          PCB_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_pcb" | head -n 1)
          
          echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
          echo "project_found=true" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          if [ -z "$PCB_FILE" ]; then
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if project files not found
        if: steps.find-files.outputs.project_found != 'true'
        run: |
          echo "No KiCad project found. Skipping workflow."
          exit 0

      - name: Skip if PCB file not found
        if: steps.find-files.outputs.pcb_found != 'true'
        run: |
          echo "No PCB file found. Cannot generate 3D models without PCB."
          exit 0

      - name: Determine default branch
        id: default-branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Default branch is: $DEFAULT_BRANCH"

      - name: Checkout default branch
        run: |
          DEFAULT_BRANCH="${{ steps.default-branch.outputs.default_branch }}"
          git fetch origin $DEFAULT_BRANCH
          git checkout $DEFAULT_BRANCH || git checkout -b $DEFAULT_BRANCH

      - name: Create 3D models output directory
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          rm -rf "${PROJECT_NAME}/docs/3d_models"
          mkdir -p "$PROJECT_NAME/docs/3d_models"
          chmod -R 777 "$PROJECT_NAME/docs"
          echo "Created 3D models directory at $PROJECT_NAME/docs/3d_models"

      - name: Pull KiCad Docker image
        run: docker pull ionutms/kicad_9:V1.0

      - name: Generate 3D models
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            ionutms/kicad_9:V1.0 \
            bash -c "set -e && \
              mkdir -p /tmp/3D_Models_Vault && \
              git clone https://github.com/ionutms/3D_Models_Vault.git /tmp/3D_Models_Vault && \
              
              mkdir -p /tmp/home/.config/kicad/9.0/colors \
              /tmp/home/.local/share/kicad/9.0/3rdparty/colors && \
              
              export HOME=/tmp/home && \
              
              echo '{\"environment\":{\"vars\":{\"KICAD9_3D_MODELS_VAULT\":\"/tmp/3D_Models_Vault/\"}}}' > /tmp/home/.config/kicad/9.0/kicad_common.json && \

              kicad-cli pcb export glb /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                -o \"/kicad_project/$PROJECT_NAME/docs/3d_models/${PROJECT_NAME}.glb\" && \

              kicad-cli pcb export vrml /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                -o \"/kicad_project/$PROJECT_NAME/docs/3d_models/${PROJECT_NAME}.wrl\""

      - name: Check for generated 3D models
        id: check-files
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          GLB_COUNT=$(find "${PROJECT_NAME}/docs/3d_models" -type f -name "*.glb" | wc -l || echo "0")
          WRL_COUNT=$(find "${PROJECT_NAME}/docs/3d_models" -type f -name "*.wrl" | wc -l || echo "0")
          TOTAL_COUNT=$((GLB_COUNT + WRL_COUNT))

          echo "Found $GLB_COUNT GLB files and $WRL_COUNT WRL files in ${PROJECT_NAME}/docs/3d_models"
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "files_generated=true" >> $GITHUB_OUTPUT
            echo "3D models generated successfully"
          else
            echo "files_generated=false" >> $GITHUB_OUTPUT
            echo "No 3D models were generated"
          fi

      - name: Upload 3D models as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kicad-3d-models-${{ steps.find-files.outputs.project_name }}
          path: ${{ steps.find-files.outputs.project_name }}/docs/3d_models/
          retention-days: 1
          if-no-files-found: warn

      - name: Configure Git
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push 3D models
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          git add "${PROJECT_NAME}/docs/3d_models"
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Committing 3D models"
            git commit -m "Add KiCad 3D models for ${PROJECT_NAME}"
            
            echo "Pushing to current branch"
            git push origin HEAD || git push -u origin HEAD
          fi